// Generated by Dagger (https://google.github.io/dagger).
package com.habit.star.di.component;

import android.app.Activity;
import com.habit.star.base.BaseActivity_MembersInjector;
import com.habit.star.di.module.ActivityModule;
import com.habit.star.di.module.ActivityModule_ProvideActivityFactory;
import com.habit.star.presenter.MainPresenter;
import com.habit.star.ui.activity.MainActivity;
import com.habit.star.ui.login.activity.LoginActivity;
import com.habit.star.ui.login.presenter.LoginActivityPresenter;
import com.habit.star.ui.mine.activity.MineMainActivity;
import com.habit.star.ui.mine.presenter.MineMainPresenter;
import com.habit.star.ui.train.activity.TainMainActivity;
import com.habit.star.ui.young.activity.YoungMainActivity;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<Activity> provideActivityProvider;

  private DaggerActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideActivityProvider =
        DoubleCheck.provider(ActivityModule_ProvideActivityFactory.create(builder.activityModule));
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public void inject(LoginActivity activity) {
    injectLoginActivity(activity);
  }

  @Override
  public void inject(MineMainActivity activity) {
    injectMineMainActivity(activity);
  }

  @Override
  public void inject(YoungMainActivity activity) {
    injectYoungMainActivity(activity);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(TainMainActivity activity) {
    injectTainMainActivity(activity);
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, new LoginActivityPresenter());
    return instance;
  }

  private MineMainActivity injectMineMainActivity(MineMainActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, new MineMainPresenter());
    return instance;
  }

  private YoungMainActivity injectYoungMainActivity(YoungMainActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, new MineMainPresenter());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, new MainPresenter());
    return instance;
  }

  private TainMainActivity injectTainMainActivity(TainMainActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, new MineMainPresenter());
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private AppComponent appComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
