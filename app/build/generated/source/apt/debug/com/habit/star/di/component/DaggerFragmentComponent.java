// Generated by Dagger (https://google.github.io/dagger).
package com.habit.star.di.component;

import android.app.Activity;
import com.habit.star.base.BaseFragment_MembersInjector;
import com.habit.star.common.fragment.EditContentFragment;
import com.habit.star.di.module.FragmentModule;
import com.habit.star.di.module.FragmentModule_ProvideActivityFactory;
import com.habit.star.presenter.CommonPresenter;
import com.habit.star.presenter.EditContentPresenter;
import com.habit.star.ui.common.CommonFragment;
import com.habit.star.ui.find.fragment.FindListFragment;
import com.habit.star.ui.find.fragment.FindMainFragment;
import com.habit.star.ui.find.presenter.FindListPresenter;
import com.habit.star.ui.login.fragment.LoginFragment;
import com.habit.star.ui.login.fragment.PerfectInformationFragment;
import com.habit.star.ui.login.fragment.RegisterFragment;
import com.habit.star.ui.login.fragment.RetrievePasswordFragment;
import com.habit.star.ui.login.fragment.SplashFragment;
import com.habit.star.ui.login.presenter.LoginPresenter;
import com.habit.star.ui.login.presenter.PerfectInformationPresenter;
import com.habit.star.ui.login.presenter.RegisterPresenter;
import com.habit.star.ui.login.presenter.RetrievePasswordPresenter;
import com.habit.star.ui.login.presenter.SplashPresenter;
import com.habit.star.ui.mine.fragment.AddAddressFragment;
import com.habit.star.ui.mine.fragment.FamilyMemberDetailFragment;
import com.habit.star.ui.mine.fragment.FamilyMemberFragment;
import com.habit.star.ui.mine.fragment.FeedbackFragment;
import com.habit.star.ui.mine.fragment.HelpCenterFragment;
import com.habit.star.ui.mine.fragment.MessageListFragment;
import com.habit.star.ui.mine.fragment.MineFragment;
import com.habit.star.ui.mine.fragment.ModifyNickNameFragment;
import com.habit.star.ui.mine.fragment.ModifyTelephoneFragment;
import com.habit.star.ui.mine.fragment.MyAchievementFragment;
import com.habit.star.ui.mine.fragment.MyAddressListFragment;
import com.habit.star.ui.mine.fragment.MyHonorCertificateFragment;
import com.habit.star.ui.mine.fragment.MyMedalAchievementFragment;
import com.habit.star.ui.mine.fragment.MyPkFragment;
import com.habit.star.ui.mine.fragment.PersonalDataFragment;
import com.habit.star.ui.mine.fragment.SystemSettingFragment;
import com.habit.star.ui.mine.presenter.AddAddressPresenter;
import com.habit.star.ui.mine.presenter.FamilyMemberDetailPresenter;
import com.habit.star.ui.mine.presenter.FamilyMemberPresenter;
import com.habit.star.ui.mine.presenter.FeedBackPresenter;
import com.habit.star.ui.mine.presenter.HelpCenterPresenter;
import com.habit.star.ui.mine.presenter.MinePresenter;
import com.habit.star.ui.mine.presenter.ModifyTelephonePresenter;
import com.habit.star.ui.mine.presenter.MyAchievementPresenter;
import com.habit.star.ui.mine.presenter.MyAddressListPresenter;
import com.habit.star.ui.mine.presenter.MyHonorCertificatePresenter;
import com.habit.star.ui.mine.presenter.MyMedalAchievementPresenter;
import com.habit.star.ui.mine.presenter.MyPkPresenter;
import com.habit.star.ui.mine.presenter.PersonalDataPresenter;
import com.habit.star.ui.mine.presenter.SystemSettingPresenter;
import com.habit.star.ui.train.fragment.BaseMsgInputFragment;
import com.habit.star.ui.train.fragment.EnergyDetailFragment;
import com.habit.star.ui.train.fragment.EnergyValueFragment;
import com.habit.star.ui.train.fragment.RopeSkipResultFragment;
import com.habit.star.ui.train.fragment.RopeSkipSettingFragment;
import com.habit.star.ui.train.fragment.TestResultFragment;
import com.habit.star.ui.train.fragment.TestResultShareSuccessFragment;
import com.habit.star.ui.train.fragment.TrainPlanFragment;
import com.habit.star.ui.train.fragment.TrainPlanListFragment;
import com.habit.star.ui.train.fragment.TrainingPlanMainFragment;
import com.habit.star.ui.train.fragment.TranHomeFragment;
import com.habit.star.ui.train.presenter.BaseMsgInputPresenter;
import com.habit.star.ui.train.presenter.EnergyDetailPresenter;
import com.habit.star.ui.train.presenter.EnergyValuePresenter;
import com.habit.star.ui.train.presenter.MessageListPresenter;
import com.habit.star.ui.train.presenter.RopeSkipResultPresenter;
import com.habit.star.ui.train.presenter.RoseSkipSettingPresenter;
import com.habit.star.ui.train.presenter.TestResultPresenter;
import com.habit.star.ui.train.presenter.TrainPlanListPresenter;
import com.habit.star.ui.train.presenter.TranHomePresenter;
import com.habit.star.ui.young.fragment.YoungHomeFragment;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerFragmentComponent implements FragmentComponent {
  private AppComponent appComponent;

  private Provider<Activity> provideActivityProvider;

  private DaggerFragmentComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private CommonPresenter getCommonPresenter() {
    return new CommonPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private RegisterPresenter getRegisterPresenter() {
    return new RegisterPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private LoginPresenter getLoginPresenter() {
    return new LoginPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private SplashPresenter getSplashPresenter() {
    return new SplashPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MinePresenter getMinePresenter() {
    return new MinePresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private RetrievePasswordPresenter getRetrievePasswordPresenter() {
    return new RetrievePasswordPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private HelpCenterPresenter getHelpCenterPresenter() {
    return new HelpCenterPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private FeedBackPresenter getFeedBackPresenter() {
    return new FeedBackPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private AddAddressPresenter getAddAddressPresenter() {
    return new AddAddressPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private FamilyMemberPresenter getFamilyMemberPresenter() {
    return new FamilyMemberPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private FamilyMemberDetailPresenter getFamilyMemberDetailPresenter() {
    return new FamilyMemberDetailPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private PerfectInformationPresenter getPerfectInformationPresenter() {
    return new PerfectInformationPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MyAchievementPresenter getMyAchievementPresenter() {
    return new MyAchievementPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MyMedalAchievementPresenter getMyMedalAchievementPresenter() {
    return new MyMedalAchievementPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MyHonorCertificatePresenter getMyHonorCertificatePresenter() {
    return new MyHonorCertificatePresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MyPkPresenter getMyPkPresenter() {
    return new MyPkPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MyAddressListPresenter getMyAddressListPresenter() {
    return new MyAddressListPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private TranHomePresenter getTranHomePresenter() {
    return new TranHomePresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private BaseMsgInputPresenter getBaseMsgInputPresenter() {
    return new BaseMsgInputPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private TestResultPresenter getTestResultPresenter() {
    return new TestResultPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private RoseSkipSettingPresenter getRoseSkipSettingPresenter() {
    return new RoseSkipSettingPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private TrainPlanListPresenter getTrainPlanListPresenter() {
    return new TrainPlanListPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private EnergyValuePresenter getEnergyValuePresenter() {
    return new EnergyValuePresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private EnergyDetailPresenter getEnergyDetailPresenter() {
    return new EnergyDetailPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private RopeSkipResultPresenter getRopeSkipResultPresenter() {
    return new RopeSkipResultPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private FindListPresenter getFindListPresenter() {
    return new FindListPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private PersonalDataPresenter getPersonalDataPresenter() {
    return new PersonalDataPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private MessageListPresenter getMessageListPresenter() {
    return new MessageListPresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  private ModifyTelephonePresenter getModifyTelephonePresenter() {
    return new ModifyTelephonePresenter(
        Preconditions.checkNotNull(
            appComponent.retrofitHelper(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideActivityProvider =
        DoubleCheck.provider(FragmentModule_ProvideActivityFactory.create(builder.fragmentModule));
    this.appComponent = builder.appComponent;
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public void inject(CommonFragment fragment) {
    injectCommonFragment(fragment);
  }

  @Override
  public void inject(RegisterFragment fragment) {
    injectRegisterFragment(fragment);
  }

  @Override
  public void inject(LoginFragment fragment) {
    injectLoginFragment(fragment);
  }

  @Override
  public void inject(SplashFragment fragment) {
    injectSplashFragment(fragment);
  }

  @Override
  public void inject(MineFragment fragment) {
    injectMineFragment(fragment);
  }

  @Override
  public void inject(EditContentFragment fragment) {
    injectEditContentFragment(fragment);
  }

  @Override
  public void inject(RetrievePasswordFragment fragment) {
    injectRetrievePasswordFragment(fragment);
  }

  @Override
  public void inject(HelpCenterFragment fragment) {
    injectHelpCenterFragment(fragment);
  }

  @Override
  public void inject(FeedbackFragment fragment) {
    injectFeedbackFragment(fragment);
  }

  @Override
  public void inject(SystemSettingFragment fragment) {
    injectSystemSettingFragment(fragment);
  }

  @Override
  public void inject(AddAddressFragment fragment) {
    injectAddAddressFragment(fragment);
  }

  @Override
  public void inject(FamilyMemberFragment fragment) {
    injectFamilyMemberFragment(fragment);
  }

  @Override
  public void inject(FamilyMemberDetailFragment fragment) {
    injectFamilyMemberDetailFragment(fragment);
  }

  @Override
  public void inject(PerfectInformationFragment fragment) {
    injectPerfectInformationFragment(fragment);
  }

  @Override
  public void inject(MyAchievementFragment fragment) {
    injectMyAchievementFragment(fragment);
  }

  @Override
  public void inject(MyMedalAchievementFragment fragment) {
    injectMyMedalAchievementFragment(fragment);
  }

  @Override
  public void inject(MyHonorCertificateFragment fragment) {
    injectMyHonorCertificateFragment(fragment);
  }

  @Override
  public void inject(MyPkFragment fragment) {
    injectMyPkFragment(fragment);
  }

  @Override
  public void inject(MyAddressListFragment fragment) {
    injectMyAddressListFragment(fragment);
  }

  @Override
  public void inject(TranHomeFragment fragment) {
    injectTranHomeFragment(fragment);
  }

  @Override
  public void inject(BaseMsgInputFragment fragment) {
    injectBaseMsgInputFragment(fragment);
  }

  @Override
  public void inject(TrainPlanFragment fragment) {
    injectTrainPlanFragment(fragment);
  }

  @Override
  public void inject(TestResultFragment fragment) {
    injectTestResultFragment(fragment);
  }

  @Override
  public void inject(RopeSkipSettingFragment fragment) {
    injectRopeSkipSettingFragment(fragment);
  }

  @Override
  public void inject(TrainingPlanMainFragment fragment) {
    injectTrainingPlanMainFragment(fragment);
  }

  @Override
  public void inject(TrainPlanListFragment fragment) {
    injectTrainPlanListFragment(fragment);
  }

  @Override
  public void inject(EnergyValueFragment fragment) {
    injectEnergyValueFragment(fragment);
  }

  @Override
  public void inject(EnergyDetailFragment fragment) {
    injectEnergyDetailFragment(fragment);
  }

  @Override
  public void inject(RopeSkipResultFragment fragment) {
    injectRopeSkipResultFragment(fragment);
  }

  @Override
  public void inject(YoungHomeFragment fragment) {
    injectYoungHomeFragment(fragment);
  }

  @Override
  public void inject(TestResultShareSuccessFragment fragment) {
    injectTestResultShareSuccessFragment(fragment);
  }

  @Override
  public void inject(FindMainFragment fragment) {
    injectFindMainFragment(fragment);
  }

  @Override
  public void inject(FindListFragment fragment) {
    injectFindListFragment(fragment);
  }

  @Override
  public void inject(PersonalDataFragment fragment) {
    injectPersonalDataFragment(fragment);
  }

  @Override
  public void inject(MessageListFragment fragment) {
    injectMessageListFragment(fragment);
  }

  @Override
  public void inject(ModifyTelephoneFragment fragment) {
    injectModifyTelephoneFragment(fragment);
  }

  @Override
  public void inject(ModifyNickNameFragment fragment) {
    injectModifyNickNameFragment(fragment);
  }

  private CommonFragment injectCommonFragment(CommonFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getRegisterPresenter());
    return instance;
  }

  private LoginFragment injectLoginFragment(LoginFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getLoginPresenter());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getSplashPresenter());
    return instance;
  }

  private MineFragment injectMineFragment(MineFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMinePresenter());
    return instance;
  }

  private EditContentFragment injectEditContentFragment(EditContentFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, new EditContentPresenter());
    return instance;
  }

  private RetrievePasswordFragment injectRetrievePasswordFragment(
      RetrievePasswordFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getRetrievePasswordPresenter());
    return instance;
  }

  private HelpCenterFragment injectHelpCenterFragment(HelpCenterFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getHelpCenterPresenter());
    return instance;
  }

  private FeedbackFragment injectFeedbackFragment(FeedbackFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getFeedBackPresenter());
    return instance;
  }

  private SystemSettingFragment injectSystemSettingFragment(SystemSettingFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, new SystemSettingPresenter());
    return instance;
  }

  private AddAddressFragment injectAddAddressFragment(AddAddressFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getAddAddressPresenter());
    return instance;
  }

  private FamilyMemberFragment injectFamilyMemberFragment(FamilyMemberFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getFamilyMemberPresenter());
    return instance;
  }

  private FamilyMemberDetailFragment injectFamilyMemberDetailFragment(
      FamilyMemberDetailFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getFamilyMemberDetailPresenter());
    return instance;
  }

  private PerfectInformationFragment injectPerfectInformationFragment(
      PerfectInformationFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getPerfectInformationPresenter());
    return instance;
  }

  private MyAchievementFragment injectMyAchievementFragment(MyAchievementFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMyAchievementPresenter());
    return instance;
  }

  private MyMedalAchievementFragment injectMyMedalAchievementFragment(
      MyMedalAchievementFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMyMedalAchievementPresenter());
    return instance;
  }

  private MyHonorCertificateFragment injectMyHonorCertificateFragment(
      MyHonorCertificateFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMyHonorCertificatePresenter());
    return instance;
  }

  private MyPkFragment injectMyPkFragment(MyPkFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMyPkPresenter());
    return instance;
  }

  private MyAddressListFragment injectMyAddressListFragment(MyAddressListFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMyAddressListPresenter());
    return instance;
  }

  private TranHomeFragment injectTranHomeFragment(TranHomeFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getTranHomePresenter());
    return instance;
  }

  private BaseMsgInputFragment injectBaseMsgInputFragment(BaseMsgInputFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getBaseMsgInputPresenter());
    return instance;
  }

  private TrainPlanFragment injectTrainPlanFragment(TrainPlanFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private TestResultFragment injectTestResultFragment(TestResultFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getTestResultPresenter());
    return instance;
  }

  private RopeSkipSettingFragment injectRopeSkipSettingFragment(RopeSkipSettingFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getRoseSkipSettingPresenter());
    return instance;
  }

  private TrainingPlanMainFragment injectTrainingPlanMainFragment(
      TrainingPlanMainFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private TrainPlanListFragment injectTrainPlanListFragment(TrainPlanListFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getTrainPlanListPresenter());
    return instance;
  }

  private EnergyValueFragment injectEnergyValueFragment(EnergyValueFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getEnergyValuePresenter());
    return instance;
  }

  private EnergyDetailFragment injectEnergyDetailFragment(EnergyDetailFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getEnergyDetailPresenter());
    return instance;
  }

  private RopeSkipResultFragment injectRopeSkipResultFragment(RopeSkipResultFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getRopeSkipResultPresenter());
    return instance;
  }

  private YoungHomeFragment injectYoungHomeFragment(YoungHomeFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private TestResultShareSuccessFragment injectTestResultShareSuccessFragment(
      TestResultShareSuccessFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private FindMainFragment injectFindMainFragment(FindMainFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  private FindListFragment injectFindListFragment(FindListFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getFindListPresenter());
    return instance;
  }

  private PersonalDataFragment injectPersonalDataFragment(PersonalDataFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getPersonalDataPresenter());
    return instance;
  }

  private MessageListFragment injectMessageListFragment(MessageListFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getMessageListPresenter());
    return instance;
  }

  private ModifyTelephoneFragment injectModifyTelephoneFragment(ModifyTelephoneFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getModifyTelephonePresenter());
    return instance;
  }

  private ModifyNickNameFragment injectModifyNickNameFragment(ModifyNickNameFragment instance) {
    BaseFragment_MembersInjector.injectMPresenter(instance, getCommonPresenter());
    return instance;
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private AppComponent appComponent;

    private Builder() {}

    public FragmentComponent build() {
      if (fragmentModule == null) {
        throw new IllegalStateException(FragmentModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFragmentComponent(this);
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
